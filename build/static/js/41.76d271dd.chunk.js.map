{"version":3,"file":"static/js/41.76d271dd.chunk.js","mappings":"qNACA,GAAgB,YAAc,iCAAiC,mBAAqB,wCAAwC,oBAAsB,0CCDrIA,EAAuB,SAACC,EAASC,GAC5C,OAAOA,EAAKC,MAAK,qBAAGC,OAAoBH,M,sCC4F1C,EAlFoB,WAClB,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOD,EAAP,KAAaE,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAI1B,GAAwBC,EAAAA,EAAAA,MAAjBC,GAAP,eACA,GAAsBC,EAAAA,EAAAA,IAAuBL,GAArCP,KAAAA,OAAR,MAAe,GAAf,EAEMa,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,cAAtBb,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MAEd,OAAQd,GACN,IAAK,OACHE,EAAQY,GACR,MACF,IAAK,SACHV,EAAUU,KAKVC,EAAY,mCAAG,WAAMH,GAAN,4EACnBA,EAAMI,iBAEAC,EAAU,CACdjB,KAAAA,EACAG,OAAAA,KAGIe,EAAatB,EAAqBI,EAAMF,IAR3B,gBAUfqB,MAAM,GAAD,OAAID,EAAWlB,KAAf,4BAVU,sCAWTS,EAAc,CAAEQ,QAAAA,EAASZ,MAAAA,IAASe,SAXzB,OAYnBC,IAZmB,4CAAH,sDAeZA,EAAQ,WACZnB,EAAQ,IACRE,EAAU,KAGZ,OACE,+BACE,kBAAMkB,UAAWC,EAAAA,YAAiBC,SAAUT,EAA5C,WACE,mBAAOO,UAAWC,EAAAA,mBAAlB,WACE,iBAAMD,UAAWC,EAAAA,kBAAjB,mBACA,kBACED,UAAWC,EAAAA,mBACXE,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRd,MAAOd,EACP6B,SAAUlB,EACVmB,YAAY,SAGhB,mBAAOR,UAAWC,EAAAA,mBAAlB,WACE,iBAAMD,UAAWC,EAAAA,kBAAjB,qBACA,kBACED,UAAWC,EAAAA,mBACXE,KAAK,MACLzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,+FACNb,MAAOX,EACP0B,SAAUlB,EACVmB,YAAY,IACZF,UAAQ,QAGZ,mBAAQN,UAAWC,EAAAA,oBAAyBE,KAAK,SAAjD,+BCpFR,EAA8B,iCCA9B,EAAoC,uCAApC,EAA+F,uCAA/F,EAA4J,yCC+B5J,EAxBoB,SAAC,GAA0B,IAAxBM,EAAuB,EAAvBA,GAAI/B,EAAmB,EAAnBA,KAAMG,EAAa,EAAbA,OACzBE,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1B,GAA0CyB,EAAAA,EAAAA,MAA1C,eAAOC,EAAP,KAA2BC,EAA3B,KAA2BA,UAE3B,OACE,gBAAIZ,UAAWC,EAAf,WACE,iBAAMD,UAAWC,EAAjB,mBAA4CvB,EAA5C,aAAqDG,MACrD,mBACEmB,UAAWC,EACXY,SAAO,iBAAE,8FAAkBF,EAAiB,CAAEF,GAAAA,EAAI1B,MAAAA,IAASe,SAAlD,mFACTgB,SAAUF,EAHZ,wB,kBCbOG,E,QAAmBC,EAAAA,IAAH,8J,UCFhBC,EAAsB,SAACzC,EAAM0C,GACxC,IAAMC,EAAmBD,EAAYE,cACrC,OAAO5C,EAAK6C,QAAO,SAAA1B,GAAO,OACxBA,EAAQjB,KAAK0C,cAAcE,SAASH,OCgDxC,EArCoB,WAClB,IAAMD,GAAclC,EAAAA,EAAAA,IAAYuC,EAAAA,IAC1BxC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1B,GAA2CG,EAAAA,EAAAA,IAAuBL,GAAlE,IAAQP,KAAAA,OAAR,MAAe,GAAf,EAAmBgD,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,WAE5B,OACE,gCAEGA,IACC,SAACV,EAAD,WACE,SAACW,EAAA,EAAD,MAIHF,IAAW,yCAEuC,IAAlDP,EAAoBzC,EAAM0C,GAAaS,SACrCF,IACAD,IACC,cAAGI,MAAO,CAAEC,UAAW,SAAUC,SAAU,GAAIC,WAAY,KAA3D,+BAKHd,EAAoBzC,EAAM0C,GAAaS,OAAS,IAC/C,eAAI3B,UAAWC,EAAf,SACGgB,EAAoBzC,EAAM0C,GAAac,KACtC,gBAAGvB,EAAH,EAAGA,GAAI/B,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAb,OACE,SAAC,EAAD,CAAa4B,GAAIA,EAAI/B,KAAMA,EAAMG,OAAQA,GAAa4B,YCzCpE,EAAwB,sBAAxB,EAA4D,4BC6B5D,EAvBe,WACb,IAAMwB,GAAmBjD,EAAAA,EAAAA,IAAYuC,EAAAA,IAC/BW,GAAWC,EAAAA,EAAAA,MAMjB,OACE,+BACE,mBAAOnC,UAAWC,EAAlB,kCAEE,kBACED,UAAWC,EACXE,KAAK,OACLX,MAAOyC,EACP1B,SAZkB,SAAAjB,GACxB4C,GAASE,EAAAA,EAAAA,IAAc,CAAEC,KAAM/C,EAAMC,cAAcC,kBCGvD,EAXqB,WACnB,OACE,iCACE,0CACA,SAAC,EAAD,KACA,SAAC,EAAD,KACA,SAAC,EAAD","sources":["webpack://react-homework/./src/components/ContactForm/contactForm.module.css?2173","utils/checkingAddedContact.js","components/ContactForm/ContactForm.jsx","webpack://react-homework/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/Loader/LoaderBackground.styled.js","utils/getFilteredContacts.js","components/ContactList/ContactList.jsx","webpack://react-homework/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"contactForm_contactForm__wa4pe\",\"contactForm__label\":\"contactForm_contactForm__label__TgjPW\",\"contactForm__button\":\"contactForm_contactForm__button__19xoq\"};","export const checkingAddedContact = (outName, data) => {\r\n  return data.find(({ name }) => name === outName);\r\n};\r\n","import { useState } from 'react';\nimport css from './contactForm.module.css';\nimport { checkingAddedContact } from 'utils/checkingAddedContact';\nimport {\n  useGetContactsRTKQuery,\n  useAddContactRTKMutation,\n} from 'redux/RTKContactsApi/ContactsApi';\n\nimport { getToken } from 'redux/tokenSlice/tokenSlice';\nimport { useSelector } from 'react-redux';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const token = useSelector(getToken);\n  // console.log(token);\n  // console.log('render');\n\n  const [addContactRTK] = useAddContactRTKMutation();\n  const { data = [] } = useGetContactsRTKQuery(token);\n\n  const handleImputChange = event => {\n    const { name, value } = event.currentTarget;\n    // eslint-disable-next-line default-case\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n    }\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    const contact = {\n      name,\n      number,\n    };\n\n    const newContact = checkingAddedContact(name, data);\n    newContact\n      ? alert(`${newContact.name} is already in contacts`)\n      : await addContactRTK({ contact, token }).unwrap();\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label className={css.contactForm__label}>\n          <span className={css.contactForm__text}>Name</span>\n          <input\n            className={css.contactForm__input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleImputChange}\n            placeholder=\"\"\n          />\n        </label>\n        <label className={css.contactForm__label}>\n          <span className={css.contactForm__text}>Number</span>\n          <input\n            className={css.contactForm__input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleImputChange}\n            placeholder=\"+\"\n            required\n          />\n        </label>\n        <button className={css.contactForm__button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__PX+Wc\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactList__item\":\"ContactItem_contactList__item__oZC1k\",\"contactList__text\":\"ContactItem_contactList__text__8hPKz\",\"contactList__button\":\"ContactItem_contactList__button__9oKva\"};","import React from 'react';\nimport css from './ContactItem.module.css';\nimport propTypes from 'prop-types';\n\nimport { useDeleteContactRTKMutation } from 'redux/RTKContactsApi/ContactsApi';\nimport { useSelector } from 'react-redux';\nimport { getToken } from 'redux/tokenSlice/tokenSlice';\n\nconst ContactItem = ({ id, name, number }) => {\n  const token = useSelector(getToken);\n  const [deleteContactRTK, { isLoading }] = useDeleteContactRTKMutation();\n\n  return (\n    <li className={css.contactList__item}>\n      <span className={css.contactList__text}>{`${name}: ${number}`}</span>\n      <button\n        className={css.contactList__button}\n        onClick={async () => await deleteContactRTK({ id, token }).unwrap()}\n        disabled={isLoading}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  number: propTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\r\n\r\nexport const LoaderBackground = styled.div`\r\n  min-width: 100vw;\r\n  min-height: 100vh;\r\n  background-color: rgb(128 128 128 / 23%);\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n`;\r\n","export const getFilteredContacts = (data, filterValue) => {\r\n  const normalizedFilter = filterValue.toLowerCase();\r\n  return data.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n","import React from 'react';\nimport css from './ContactList.module.css';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport Loader from 'components/Loader/Loader';\nimport { LoaderBackground } from 'components/Loader/LoaderBackground.styled';\n\nimport { getFilterValue } from 'redux/filterSlice/filterSlice';\nimport { useSelector } from 'react-redux';\n\nimport { useGetContactsRTKQuery } from 'redux/RTKContactsApi/ContactsApi';\nimport { getFilteredContacts } from 'utils/getFilteredContacts';\n\nimport { getToken } from 'redux/tokenSlice/tokenSlice';\n\nconst ContactList = () => {\n  const filterValue = useSelector(getFilterValue);\n  const token = useSelector(getToken);\n  const { data = [], isError, isFetching } = useGetContactsRTKQuery(token);\n\n  return (\n    <>\n      {/* loader */}\n      {isFetching && (\n        <LoaderBackground>\n          <Loader />\n        </LoaderBackground>\n      )}\n      {/* error */}\n      {isError && <h1>Error 404 :D</h1>}\n      {/* notFound */}\n      {getFilteredContacts(data, filterValue).length === 0 &&\n        !isFetching &&\n        !isError && (\n          <p style={{ textAlign: 'center', fontSize: 24, fontWeight: 700 }}>\n            Contact not found\n          </p>\n        )}\n      {/* completed */}\n      {getFilteredContacts(data, filterValue).length > 0 && (\n        <ul className={css.contactList}>\n          {getFilteredContacts(data, filterValue).map(\n            ({ id, name, number }) => (\n              <ContactItem id={id} name={name} number={number} key={id} />\n            )\n          )}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"filter_label__G-zB2\",\"inputFilter\":\"filter_inputFilter__1QHNM\"};","import React from 'react';\nimport css from './filter.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/filterSlice/filterSlice';\nimport { filterContact } from 'redux/filterSlice/filterSlice';\n\nconst Filter = () => {\n  const filterInputValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const handleFilterInput = event => {\n    dispatch(filterContact({ text: event.currentTarget.value }));\n  };\n\n  return (\n    <>\n      <label className={css.label}>\n        Find by contact name\n        <input\n          className={css.inputFilter}\n          type=\"text\"\n          value={filterInputValue}\n          onChange={handleFilterInput}\n        ></input>\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\r\nimport ContactList from 'components/ContactList/ContactList';\r\nimport Filter from 'components/Filter/Filter';\r\n\r\nconst ContactsPage = () => {\r\n  return (\r\n    <>\r\n      <h2>ContactsList</h2>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"names":["checkingAddedContact","outName","data","find","name","useState","setName","number","setNumber","token","useSelector","getToken","useAddContactRTKMutation","addContactRTK","useGetContactsRTKQuery","handleImputChange","event","currentTarget","value","handleSubmit","preventDefault","contact","newContact","alert","unwrap","reset","className","css","onSubmit","type","pattern","title","required","onChange","placeholder","id","useDeleteContactRTKMutation","deleteContactRTK","isLoading","onClick","disabled","LoaderBackground","styled","getFilteredContacts","filterValue","normalizedFilter","toLowerCase","filter","includes","getFilterValue","isError","isFetching","Loader","length","style","textAlign","fontSize","fontWeight","map","filterInputValue","dispatch","useDispatch","filterContact","text"],"sourceRoot":""}